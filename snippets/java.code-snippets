{
    "Hola mundo en java": {
        "prefix": "!ys-java-hola-mundo",
        "body": ["System.out.println(\"Hola mundo\");"],
        "description": "Hola mundo en java"
    },
    "Scanner Leer": {
        "prefix": "!ys-java-scanner",
        "body": ["Scanner leer = new Scanner(System.in).useDelimiter(\"\\n\");"],
        "description": "Scanner Leer"
    },
    "hasRole": {
        "prefix": "!ys-java-hasRole",
        "body": ["@PreAuthorize(\"hasRole('${1:ROLE_ADMIN}')\")"],
        "description": "Accesible si tiene un rol especifico"
    },
    "UUID": {
        "prefix": "!ys-java-uuid",
        "body": ["    @Id\n    @GeneratedValue(generator = \"uuid\")\n    @GenericGenerator(name = \"uuid\", strategy = \"uuid2\") //Estrategia alternativa\n    private String id;"],
        "description": "Generador UUID para entidad"
    },
    "ID generación IDENTITY": {
        "prefix": "!ys-java-identity",
        "body": ["@Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private ${1:Integer} id;"],
        "description": "ID generación IDENTITY"
    },
    "Enum Rol": {
        "prefix": "!ys-java-rol",
        "body": ["@Enumerated(EnumType.STRING)\n    private ${1:Rol} ${2:rol};"],
        "description": "Anotación Enum"
    },
    "Ejemplo Sort Comparator": {
        "prefix": "!ys-java-comparator",
        "body": ["${1:lista}.sort(Comparator.comparing(${2:Entidad}::${3:getAtributo}));"],
        "description": "Ejemplo Sort Comparator"
    },
    "GetMapping": {
        "prefix": "!ys-java-getmapping",
        "body": ["    @GetMapping( \"/\") // GetMapping Simple.", "    public String ${1:NOMBRE}() {", "        return \"index.html\";", "    }", "    @GetMapping({ \"/\", \"/index\" }) // Dos urls misma vista.", "    public String ${2:NOMBRE}() {", "        return \"index.html\";", "    }"],
        "description": "GetMapping Simple"
    },
    "PostMapping": {
        "prefix": "!ys-java-postmapping",
        "body": ["    @PostMapping(\"${1:/}\")\n    public String ${2:post}(${3:Args}){\n        return \"${4:post.html}\";\n    }"],
        "description": "PostMapping Simple"
    },
    "RequestMapping": {
        "prefix": "!ys-java-requestmapping",
        "body": ["    @PreAuthorize(\"hasRole('ROLE_ADMIN')\")", "    @RequestMapping(\"/eliminar/{id}\") //Ajustar", "    public String eliminarEntidad(@PathVariable(\"id\") String id) {", "        EntidadServicio.eliminarEntidad(id); //Cambiar", "        return \"redirect:/entidad/listar\"; //Cambiar", "    }"],
        "description": "RequestMapping para eliminar entidad"
    },
    "Java Page Controller": {
        "prefix": "!ys-java-page-cont",
        "body": ["    @GetMapping(\"/lista\")", "    public String ${1:paginarEntidad}(@PageableDefault(page = 0, size = 5) Pageable pageable, Model model) {", "        Page<${2:Entidad}> page = ${3:entidadServicio}.paginar(pageable);", "        model.addAttribute(\"page\", page);", "        model.addAttribute(\"currentPage\", page.getNumber());", "        model.addAttribute(\"totalItems\", page.getTotalElements());", "        model.addAttribute(\"totalPages\", page.getTotalPages());", "        return \"${4:example}\";", "    }"],
        "description": "Java Page Controller"
    },
    "Java Page Service": {
        "prefix": "!ys-java-page-serv",
        "body": ["    public Page<${1:entidad}> ${2:nombreMetodo}(Pageable pageable) {", "        return ${3:entidadRepository}.findAll(pageable);", "    }"],
        "description": "Java Page Service"
    },
    "Clase EmailService": {
        "prefix": "!ys-java-Email",
        "body": ["@Service", "public class ${1:EmailService} {", "    @Autowired", "    private JavaMailSender emailSender;", "", "    public void enviarCorreo(String destinatario, String asunto, String mensaje) {", "        SimpleMailMessage correo = new SimpleMailMessage();", "        correo.setTo(destinatario);", "        correo.setSubject(asunto);", "        correo.setText(mensaje);", "        ", "        emailSender.send(correo);", "    }", "}"],
        "description": "Clase EmailService"
    },
    "Clase Seguridad Completa": {
        "prefix": "!ys-java-Seguridad-Clase",
        "body": ["@Configuration", "@EnableWebSecurity", "@EnableMethodSecurity", "public class ${1:SeguridadWeb} {", "", "    @Autowired", "    public ${2:UsuarioServicio} ${3:usuarioServicio};", "", "    // Encryptar contraseñas", "    @Autowired", "    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {", "        auth.userDetailsService(${3:usuarioServicio})", "                .passwordEncoder(new BCryptPasswordEncoder());", "    }", "", "    // Direcciones permitidas y filtros", "    @Bean", "    public SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {", "        return httpSecurity", "                .csrf(csrf -> {", "                    csrf.disable();", "                })", "                // Direcciones permitidas", "                .authorizeHttpRequests(auth -> {", "                    auth.requestMatchers(\"/admin/*\").hasRole(\"ADMIN\");", "                    auth.requestMatchers(\"/login\", \"/registrar\").permitAll();", "                    auth.requestMatchers(\"/css/*\", \"/js/*\", \"/img/*\", \"/registrar\", \"/registro\")", "                            .permitAll();", "                    auth.anyRequest().authenticated();", "                })", "                // Formulario de login", "                .formLogin(form -> {", "                    form.loginPage(\"/login\"); // Url de la pagina de login\")", "                    form.loginProcessingUrl(\"/logincheck\"); // Url del action del formulario", "                    form.usernameParameter(\"email\"); // Nombre del input del formulario\")", "                    form.passwordParameter(\"password\"); // Nombre del input del formulario\")", "                    form.defaultSuccessUrl(\"/inicio\", true); // Url de inicio correcto", "                    // form.successHandler(successHandler()); // Redirect al hacer login correcto ↓", "                    // Metodo abajo", "                    form.permitAll();", "                })", "                .logout(logout -> {", "                    logout.logoutUrl(\"/logout\"); // Url de logout", "                    logout.logoutSuccessUrl(\"/\"); // Url de redireccionamiento al hacer logout", "                    logout.permitAll();", "                })", "                .sessionManagement(session -> {", "                    session.sessionCreationPolicy(SessionCreationPolicy.ALWAYS); // ALWAYS, IF_REQUIRED, NEVER,", "                                                                                 // STATELESS", "                    session.maximumSessions(2); // Maximo de sesiones permitidas", "                    session.invalidSessionUrl(\"/\"); // Url de redireccionamiento cuando se cierra sesion", "                    session.sessionFixation(sessionFixation -> {", "                        // migrateSession() - newSession() - none()", "                        sessionFixation.migrateSession();", "                    });", "                    sessionRegistry();", "", "                })", "                .build();", "    }", "", "    @Bean", "    public SessionRegistry sessionRegistry() {", "        return new SessionRegistryImpl();", "    }", "", "    }", ""],
        "description": "Clase Seguridad Completa"
    },
    "UserDetails loadUserByUsername": {
        "prefix": "!ys-java-UserDetails",
        "body": ["//El servicio debe implementar ↓", "// implements UserDetailsService", "", "@Override", "    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {", "        Usuario usuario = usuarioRepositorio.findByEmail(email); // ←MODIFICAR", "        if (usuario != null) { // ←MODIFICAR", "", "            List<GrantedAuthority> permisos = new ArrayList<>();", "", "            GrantedAuthority perm = new SimpleGrantedAuthority(\"ROLE_\" + usuario.getRol().toString());", "", "            permisos.add(perm);", "", "            // Luego de validar el usuario guardamos una sesion web", "            ServletRequestAttributes attr = (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();", "", "            HttpSession session = attr.getRequest().getSession(true);", "", "            // Tiempo de inactividad en segundos para cerrar la sesión", "            // session.setMaxInactiveInterval(60);", "", "            // La session contiene los datos del usuario recuperado de la base de datos", "            session.setAttribute(\"usuariosession\", usuario);", "", "            return new User(usuario.getEmail(), usuario.getPassword(), permisos);  // ←MODIFICAR", "        } else {", "            return null;", "        }", "    }"],
        "description": "Para el servicio de Usuario, para obtener los datos de la session"
    },
    "Solo Usuarios anónimos": {
        "prefix": "!ys-java-isAnonymous",
        "body": ["// Para que solo sea visible para usuarios no logueados", "@PreAuthorize(\"isAnonymous()\")"],
        "description": "Para que solo sea visible para usuarios no logueados"
    },
    "Clase ErrorControlador": {
        "prefix": "!ys-java-error-controller",
        "body": ["@Controller", "public class ErrorControlador implements ErrorController {", "    ", "    @RequestMapping(value = \"/error\", method = { RequestMethod.GET, RequestMethod.POST })", "    public ModelAndView renderErrorPage(HttpServletRequest httpRequest) {", "        ModelAndView errorPage = new ModelAndView(\"error/error.html\"); //CREAR ESTA VISTA", "        String errorMsg = \"\";", "", "        int httpErrorCode = getErrorCode(httpRequest);", "", "        switch (httpErrorCode) {", "            case 400: {", "                errorMsg = \"El recurso solicitado no existe.\";", "                break;", "            }", "            case 403: {", "                errorMsg = \"No tiene permisos para acceder al recurso.\";", "                break;", "            }", "            case 401: {", "                errorMsg = \"No se encuentra autorizado.\";", "                break;", "            }", "            case 404: {", "                errorMsg = \"El recurso solicitado no fue encontrado.\";", "                break;", "            }", "            case 500: {", "                errorMsg = \"Ocurrió un error interno.\";", "                break;", "            }", "            }", "    ", "            errorPage.addObject(\"codigo\", httpErrorCode);", "            errorPage.addObject(\"mensaje\", errorMsg);", "            return errorPage;", "        }", "    ", "        private int getErrorCode(HttpServletRequest httpRequest) {", "            return (Integer) httpRequest.getAttribute(\"jakarta.servlet.error.status_code\");", "        }", "    ", "        ", "        public String getErrorPath() {", "            return \"error/error.html\";", "        }", "", "}"],
        "description": "ErrorControlador "
    }
}
